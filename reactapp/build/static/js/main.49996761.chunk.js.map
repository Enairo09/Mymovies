{"version":3,"sources":["Movies.js","App.js","serviceWorker.js","index.js"],"names":["Movies","props","handleClick","bind","state","selected","movieLiked","console","log","this","idMovieDB","movieName","setState","fetch","method","headers","body","movieDesc","movieImg","then","data","catch","error","handleClickParent","styleHeart","cursor","position","top","right","color","display","displayOnlyLike","Col","xs","sm","md","lg","style","marginBottom","Card","CardImg","height","width","src","alt","CardBody","backgroundColor","overflow","onClick","size","icon","faHeart","CardTitle","fontSize","textAlign","CardText","Component","App","handleClickLikeOff","viewOnlyLike","handleClickLikeOn","isSelected","movieNameListCopy","movieNameList","slice","push","movieCount","indexMovie","indexOf","splice","movies","moviesLiked","ctx","response","json","results","map","movie","title","length","movieList","i","isLiked","y","id","key","overview","poster_path","Container","Row","movieLastList","handleClickParentOn","handleClickParentOff","Header","toggle","toggleTwo","handleClickOn","handleClickOff","isOpen","popoverOpen","Navbar","dark","expand","className","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","NavItem","NavLink","Button","type","borderColor","Popover","placement","target","PopoverHeader","PopoverBody","join","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.49996761.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHeart } from '@fortawesome/free-solid-svg-icons';\n\nimport {\n  Card, CardImg, CardText, CardBody,\n  CardTitle, Col,\n} from 'reactstrap';\n\nclass Movies extends Component {\n\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.state = { selected: this.props.movieLiked };\n  }\n\n  handleClick() {\n    console.log(this.props.idMovieDB)\n    console.log(this.props.movieName)\n    var ctx = this;\n\n    //changer le statut \n    this.setState({ selected: !this.state.selected });\n\n    //ajouter le film liké a ma base de donnée\n    if (this.state.selected === false) {\n      fetch('/api/mymovies', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n        body: `title=${ctx.props.movieName}&overview=${ctx.props.movieDesc}&poster_path=${ctx.props.movieImg}&idMovieDB=${ctx.props.idMovieDB}`\n      }).then(function (data) { console.log('this movie is saved', data) }).catch(function (error) { console.log('error', error) });\n    } else {\n\n      //supprimer le film déliké\n      // if(this.state.selected === true){\n      fetch(`/api/mymovies/${this.props.idMovieDB}`, {\n        method: 'DELETE'\n      });\n    }\n    //renvoyer les info au click parent\n    this.props.handleClickParent(this.state.selected, this.props.movieName);\n    console.log(this.state.selected);\n  }\n\n  render() {\n    // color: \"#FF6861\"\n    var styleHeart = {\n      cursor: 'pointer',\n      position: \"absolute\",\n      top: 5,\n      right: 5,\n      color: \"white\"\n    }\n\n    if (this.state.selected === true) {\n      styleHeart.color = \"#FF6861\"\n    }\n\n    var display = '';\n\n    if (this.props.displayOnlyLike && !this.state.selected) {\n\n      display = 'none'\n\n    }\n    return (\n      <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" style={{ display }}>\n        <div style={{ marginBottom: 30 }}>\n          <Card >\n\n            <CardImg style={{ height: 300 }} top width=\"30\" src={`https://image.tmdb.org/t/p/w500/${this.props.movieImg}`} alt=\"Card image cap\" />\n            <CardBody style={{ backgroundColor: 'white', height: 400, overflow: 'scroll' }}>\n              <FontAwesomeIcon onClick={this.handleClick} size=\"1x\" icon={faHeart} style={styleHeart} />\n              <CardTitle style={{ fontSize: 16, textAlign: \"center\" }}>{this.props.movieName}</CardTitle>\n              <CardText style={{ textAlign: \"justify\" }}>{this.props.movieDesc}</CardText>\n              {/* <Button>Button</Button> */}\n            </CardBody>\n\n          </Card>\n        </div>\n      </Col>\n    );\n  };\n};\n\nexport default Movies;","import React, { Component } from 'react';\nimport Movies from './Movies';\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport {\n  Container, Row,\n  Button, Col, Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink, Popover, PopoverHeader, PopoverBody\n} from 'reactstrap';\n\nclass App extends Component {\n\n  // header click instruct\n  constructor(props) {\n    super(props);\n    this.handleClickLikeOn = this.handleClickLikeOn.bind(this);\n    this.handleClickLikeOff = this.handleClickLikeOff.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      viewOnlyLike: false,\n      movieCount: 0,\n      movieNameList: [],\n      movies: [],\n      moviesLiked: []\n    };\n  }\n\n\n  componentDidMount() {\n    var ctx = this;\n\n    //get API list of movies\n    fetch('/api/movies').then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      console.log(data.body.results);\n      ctx.setState({ movies: data.body.results });\n    }).catch(function (error) {\n      console.log('request failed', error);\n    });\n\n    //get LIKED list of movies\n    fetch('/api/mymovies').then(function (response) {\n      return response.json();\n    }).then(function (movies) {\n      var movieNameListCopy = movies.data.map((movie) => {\n        return movie.title;\n      });\n      ctx.setState({\n        moviesLiked: movies.data,\n        movieCount: movies.data.length,\n        movieNameList: movieNameListCopy\n      });\n    })\n      .catch(function (error) {\n        console.log('Request failed ->', error)\n      });\n  };\n\n  //gerer les clicks des hearts\n  handleClickLikeOff = () => {\n    this.setState({ viewOnlyLike: false });\n  }\n\n  handleClickLikeOn = () => {\n    this.setState({ viewOnlyLike: !this.state.viewOnlyLike });\n  }\n\n  handleClick = (isSelected, movieName) => {\n    var movieNameListCopy = this.state.movieNameList.slice();\n    if (isSelected === false) {\n      movieNameListCopy.push(movieName)\n      this.setState({\n        movieCount: (this.state.movieCount + 1),\n        movieNameList: movieNameListCopy\n      })\n      console.log('je suis la', this.state.movieCount)\n    } else {\n      var indexMovie = movieNameListCopy.indexOf(movieName)\n      movieNameListCopy.splice(indexMovie, 1)\n      this.setState({\n        movieCount: (this.state.movieCount - 1),\n        movieNameList: movieNameListCopy\n      })\n      console.log('je suis ICI', this.state.movieCount)\n    }\n  }\n\n\n  render() {\n\n    var movieList = this.state.movies.map((movie, i) => {\n      var isLiked = false;\n      for (var y = 0; y < this.state.moviesLiked.length; y++) {\n        if (movie.id === this.state.moviesLiked[y].idMovieDB) {\n          isLiked = true;\n          break;\n        }\n      }\n      return (<Movies\n        key={i}\n        movieName={movie.title}\n        movieDesc={movie.overview}\n        movieImg={movie.poster_path}\n        idMovieDB={movie.id}\n        movieLiked={isLiked}\n        displayOnlyLike={this.state.viewOnlyLike}\n        handleClickParent={this.handleClick} />);\n    });\n\n    return (\n      <div>\n        <Container>\n          <Row>\n            <Col>\n              <Header movieLastList={this.state.movieNameList} movieCount={this.state.movieCount} handleClickParentOn={this.handleClickLikeOn} handleClickParentOff={this.handleClickLikeOff} />\n            </Col>\n          </Row>\n          <Row>\n            {movieList};\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nclass Header extends Component {\n\n  constructor() {\n    super();\n    this.toggle = this.toggle.bind(this);\n    this.toggleTwo = this.toggleTwo.bind(this);\n    this.handleClickOn = this.handleClickOn.bind(this);\n    this.handleClickOff = this.handleClickOff.bind(this);\n    this.state = { isOpen: false, popoverOpen: false };\n\n  }\n\n  handleClickOn() {\n    this.props.handleClickParentOn();\n  }\n  handleClickOff() {\n    this.props.handleClickParentOff();\n  }\n\n  toggle() {\n    this.setState({ isOpen: !this.state.isOpen });\n  }\n\n  toggleTwo() {\n    this.setState({ popoverOpen: !this.state.popoverOpen });\n  }\n\n  render() {\n\n\n    return (\n      <div>\n        <Navbar color=\"dark\" dark expand=\"md\">\n          <span className=\"navbar-brand\">\n            <img src=\"./logo.png\" width=\"30\" height=\"30\" className=\"d-inline-block align-top\" alt=\"logo myMoviz\" />\n          </span>\n          <NavbarBrand style={{ color: 'white' }} href=\"/\">MyMoviz</NavbarBrand>\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar >\n              <NavItem>\n                <NavLink onClick={this.handleClickOff} style={{ color: 'white', textAlign: \"right\" }} href=\"#\">All Movies</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink onClick={this.handleClickOn} style={{ color: 'white', textAlign: \"right\" }} href=\"#\">My FavMovies</NavLink>\n              </NavItem>\n              <Button id=\"Popover1\" type=\"button\" style={{ textAlign: \"right\", color: 'white', backgroundColor: \"transparent\", borderColor: \"transparent\" }}>\n                {this.props.movieCount} films favoris\n            </Button>\n              <Popover placement=\"bottom\" isOpen={this.state.popoverOpen} target=\"Popover1\" toggle={this.toggleTwo}>\n                <PopoverHeader>Derniers films ajoutés</PopoverHeader>\n                <PopoverBody>{this.props.movieLastList.join(', ')}...</PopoverBody>\n              </Popover>\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}